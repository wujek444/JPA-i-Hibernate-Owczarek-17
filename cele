JPQL -> Java Persistence Query Language
--------UWAGA!!!----------------------
pisanie zapytań w języku JPQL jest niezbyt bezpieczne od strony programistycznej (rezultaty zapytań są
niekoniecznie przewidywalne)
------------------------------------
pozwala na bardziej intuicyjne i uniwersalne pobieranie z bazy, pozwala na napisanie złożonych zapytań

zapytania do bazy tworzymy za pomocą entityManagera:

entityManager.createQuery(String query, Class klasaZwracanegoObiektu);

konkretne użycie metody:
entityManager.createQuery("select e from Employee e where e.lastName = 'Pająk'", Employee.class);
JPQL przypomina SQL'a:
select - wybierz
e - alias pracownika (wybieramy całego pracownika)
from Employee e - z tabeli Employee, której nadajemy alias 'e'
where e.lastName = 'Pająk' - gdzie nazwisko pracownika = Pająk

----------------UWAGA!!!--------------------------------------
PISZĄC ZAPYTANIA MUSIMY POSŁUGIWAĆ SIĘ NAZWAMI PÓL KLASY, A NIE WARTOŚCIAMI PODANYMI 
PRZY @Column(name = "cośtam"), bo inaczej nie zadziała
--------------------------------------------------------------

otrzymane zapytanie będzie typu TypedQuery<Employee>, które informuje nas o typie zwracanego obiektu

gdy już stworzymy zapytanie, to możemy coś z niego "wyciągnąć":
wyniki zapytania pobieramy na dwa sposoby:
1. gdy zapytanie zwróci jeden wynik, to dobieramy się do niego za pomocą metody
query.getSingleResult(); -> w tym przypadku wynik będzie typu Employee
2. gdy zapytanie zwraca wiele wyników, to używamy metody
query.getResultList();, która zwraca listę obiektów (typu Employee) 

możemy także korzystać z nietypowanego zapytania, które zwróci nam obiekt(y) typu Object:
entityManager.createQuery(String query);

w JPQL istnieje funkcja concate(e.firstName, ' ', e.lastName), która służy do łaczenie stringów
(można używać w select concat()), na wybieranych kolumnach można wykonywać operacje arytmetyczne:
select x.a, x.b * 0.2 from X x 
